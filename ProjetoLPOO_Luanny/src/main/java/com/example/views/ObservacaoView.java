/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.example.views;

import com.example.entities.Observacao;
import com.example.entities.Pesquisador;
import com.example.dao.PersistenciaJPA;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import java.util.List;
import javax.swing.JOptionPane;

/**
 *
 * @author luann
 */
public class ObservacaoView extends javax.swing.JFrame {

    /**
     * Creates new form ObservacaoView
     */
    public ObservacaoView() {
        initComponents();
        tblObservacoes.setModel(new DefaultTableModel(
        new Object[]{"ID", "Data", "Detalhes", "Pesquisador"}, 0
    ));
    }
    
    private void carregarObservacoes() {
        PersistenciaJPA dao = new PersistenciaJPA();
        try {
            List<Observacao> observacoes = dao.getEntityManager()
                                              .createQuery("SELECT o FROM Observacao o", Observacao.class)
                                              .getResultList();

            DefaultTableModel model = (DefaultTableModel) tblObservacoes.getModel();
            model.setRowCount(0); 

            for (Observacao obs : observacoes) {
                model.addRow(new Object[]{
                    obs.getId(),
                    obs.getData(),
                    obs.getDetalhes(),
                    obs.getPesquisador().getNome()
                });
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao carregar observações: " + e.getMessage());
        } finally {
            dao.fecharConexao();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblObservacoes = new javax.swing.JTable();
        btnListar = new javax.swing.JButton();
        btnCad = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("SWRomnc", 2, 16)); // NOI18N
        jLabel1.setText(" CONTROLE DE OBSERVAÇÕES");
        jLabel1.setBorder(new javax.swing.border.MatteBorder(null));

        tblObservacoes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Data", "Detalhes", "Pesquisador"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblObservacoes);

        btnListar.setText("Listar Observações");
        btnListar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarActionPerformed(evt);
            }
        });

        btnCad.setText("Nova Observação");
        btnCad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadActionPerformed(evt);
            }
        });

        btnEdit.setText("Editar Observação");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir Observação");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnListar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnCad)
                                .addGap(18, 18, 18)
                                .addComponent(btnEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnExcluir))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(113, 113, 113)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnListar)
                    .addComponent(btnCad)
                    .addComponent(btnEdit)
                    .addComponent(btnExcluir))
                .addGap(28, 28, 28))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnListarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarActionPerformed
      
        DefaultTableModel modeloTabela = (DefaultTableModel) tblObservacoes.getModel();
        modeloTabela.setRowCount(0);

       
        try {
            
            EntityManagerFactory emf = Persistence.createEntityManagerFactory("ProjetoLPOOE1_PU");
            EntityManager em = emf.createEntityManager();

            
            List<Observacao> observacoes = em.createQuery("SELECT o FROM Observacao o", Observacao.class)
                                            .getResultList();

            
            for (Observacao obs : observacoes) {
                modeloTabela.addRow(new Object[]{
                    obs.getId(),
                    obs.getData(),
                    obs.getDetalhes(),
                    obs.getPesquisador().getNome() 
                });
            }

            em.close();
            emf.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Erro ao buscar registros: " + e.getMessage());
        }
    }//GEN-LAST:event_btnListarActionPerformed

    private void btnCadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadActionPerformed
        ObservacaoCadastro telaObservacaoCadastro = new ObservacaoCadastro();
        telaObservacaoCadastro.setVisible(true);
        telaObservacaoCadastro.setLocationRelativeTo(this);
    }//GEN-LAST:event_btnCadActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        int selectedRow = tblObservacoes.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Por favor, selecione uma observação para excluir.");
            return;
        }
        int id = (int) tblObservacoes.getValueAt(selectedRow, 0);

        int confirm = JOptionPane.showConfirmDialog(
            this,
            "Tem certeza que deseja excluir esta observação?",
            "Confirmação de Exclusão",
            JOptionPane.YES_NO_OPTION
        );

        if (confirm == JOptionPane.YES_OPTION) {
            PersistenciaJPA dao = new PersistenciaJPA();
            try {
                Observacao obs = (Observacao) dao.find(Observacao.class, id);
                if (obs != null) {
                    dao.remover(obs);
                    JOptionPane.showMessageDialog(this, "Observação excluída com sucesso.");
                    carregarObservacoes(); 
                } else {
                    JOptionPane.showMessageDialog(this, "Erro: Observação não encontrada.");
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Erro ao excluir observação: " + e.getMessage());
            } finally {
                dao.fecharConexao();
            }
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        try {
            
            int linhaSelecionada = tblObservacoes.getSelectedRow();

            if (linhaSelecionada == -1) {
                JOptionPane.showMessageDialog(this, "Selecione uma observação para editar!");
                return;
            }

            int id = (int) tblObservacoes.getValueAt(linhaSelecionada, 0);

            PersistenciaJPA dao = new PersistenciaJPA();
            Observacao observacaoSelecionada = (Observacao) dao.find(Observacao.class, id);

            if (observacaoSelecionada == null) {
                JOptionPane.showMessageDialog(this, "Erro: Observação não encontrada no banco de dados!");
                return;
            }

            ObservacaoCadastro telaEdicao = new ObservacaoCadastro(observacaoSelecionada);
            telaEdicao.setVisible(true);
            telaEdicao.setLocationRelativeTo(this);

            telaEdicao.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent e) {
                    carregarObservacoes(); 
                }
            });

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erro ao editar observação: " + e.getMessage());
        }
    }//GEN-LAST:event_btnEditActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ObservacaoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ObservacaoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ObservacaoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ObservacaoView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ObservacaoView().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCad;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnListar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblObservacoes;
    // End of variables declaration//GEN-END:variables
}
